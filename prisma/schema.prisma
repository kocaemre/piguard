// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  resetToken    String?
  resetTokenExpiry DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  commands      RobotCommand[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Robot Management Models
model SensorData {
  id          String   @id @default(cuid())
  sensorType  String   // temperature, humidity, distance, etc.
  value       Float
  unit        String   // celsius, percent, mm, etc.
  timestamp   DateTime @default(now())
}

model SystemLog {
  id        String   @id @default(cuid())
  logType   LogType
  message   String
  timestamp DateTime @default(now())
}

model RobotCommand {
  id        String        @id @default(cuid())
  command   String
  params    Json?
  status    CommandStatus @default(PENDING)
  result    String?
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  timestamp DateTime      @default(now())
}

model RaspberryPiConfig {
  id       String @id @default(cuid())
  name     String @unique
  value    String
  category String @default("general")
}

// API Data Cache Models
model ArduinoLogCache {
  id          String   @id @default(cuid())
  gyroX       String
  gyroY       String
  gyroZ       String
  servoNeck   String
  servoHead   String
  distFront   String
  distLeft    String
  distRight   String
  motorState  String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([createdAt(sort: Desc)])
}

model PiSystemCache {
  id          String   @id @default(cuid())
  cpu         String
  ram         String
  cpuTemp     String
  gpuTemp     String
  uploadSpeed String
  downloadSpeed String
  timestamp   DateTime
  createdAt   DateTime @default(now())
  
  @@index([createdAt(sort: Desc)])
}

model ImageCache {
  id          String   @id @default(cuid())
  filename    String
  url         String
  timestamp   DateTime @default(now())
  
  @@index([timestamp(sort: Desc)])
}

model LogFileCache {
  id          String   @id @default(cuid())
  filename    String
  url         String
  timestamp   DateTime @default(now())
  
  @@index([timestamp(sort: Desc)])
}

// Enum definitions
enum Role {
  USER
  ADMIN
  APPROVED
}

enum LogType {
  INFO
  WARNING
  ERROR
}

enum CommandStatus {
  PENDING
  EXECUTED
  FAILED
}
